package com.example.shdauthorizationserver.configuration;

import com.example.shdauthorizationserver.model.dao.UserAccountDaoExtended;
import com.example.shdauthorizationserver.oidc.OidcUserInfoService;
import com.example.shdauthorizationserver.oidc.OidcUserInfoServiceFactory;
import com.nimbusds.jose.jwk.JWKSet;
import com.nimbusds.jose.jwk.RSAKey;
import com.nimbusds.jose.jwk.source.ImmutableJWKSet;
import com.nimbusds.jose.jwk.source.JWKSource;
import com.nimbusds.jose.proc.SecurityContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.core.OAuth2AccessToken;
import org.springframework.security.oauth2.core.oidc.OidcIdToken;
import org.springframework.security.oauth2.core.oidc.OidcUserInfo;
import org.springframework.security.oauth2.core.oidc.endpoint.OidcParameterNames;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.server.authorization.OAuth2Authorization;
import org.springframework.security.oauth2.server.authorization.OAuth2TokenType;
import org.springframework.security.oauth2.server.authorization.config.annotation.web.configuration.OAuth2AuthorizationServerConfiguration;
import org.springframework.security.oauth2.server.authorization.config.annotation.web.configurers.OAuth2AuthorizationServerConfigurer;
import org.springframework.security.oauth2.server.authorization.oidc.authentication.OidcUserInfoAuthenticationContext;
import org.springframework.security.oauth2.server.authorization.oidc.authentication.OidcUserInfoAuthenticationToken;
import org.springframework.security.oauth2.server.authorization.settings.AuthorizationServerSettings;
import org.springframework.security.oauth2.server.authorization.token.JwtEncodingContext;
import org.springframework.security.oauth2.server.authorization.token.OAuth2TokenCustomizer;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;
import org.springframework.security.web.util.matcher.MediaTypeRequestMatcher;
import org.springframework.security.web.util.matcher.RequestMatcher;

import javax.sql.DataSource;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration {

    @Bean
    @Order(1)
    public SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http,
                                                                      OidcUserInfoServiceFactory oidcUserInfoServiceFactory)
            throws Exception {
        /*
        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);
        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class)
                .oidc(Customizer.withDefaults());	// Enable OpenID Connect 1.0
        */

        OAuth2AuthorizationServerConfigurer authorizationServerConfigurer =
                new OAuth2AuthorizationServerConfigurer();
        RequestMatcher endpointsMatcher = authorizationServerConfigurer
                .getEndpointsMatcher();

        // https://github.com/spring-projects/spring-authorization-server/blob/a661e1cdb7a77e3f2a1a0d958f8949896af66c6f/oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcUserInfoAuthenticationProvider.java#L134
        // By default, the user info response is generated by using claims from the id_token that are returned with
        // the token response. See OidcUserInfoAuthenticationProvider -
        // private Function<OidcUserInfoAuthenticationContext, OidcUserInfo> userInfoMapper = new DefaultOidcUserInfoMapper();
        Function<OidcUserInfoAuthenticationContext, OidcUserInfo> userInfoMapper = (context) -> {

            OAuth2Authorization authorization = context.getAuthorization();
            OAuth2Authorization.Token<OAuth2AccessToken> accessToken = authorization.getAccessToken();
            OidcIdToken idToken = authorization.getToken(OidcIdToken.class).getToken();

            OidcUserInfoAuthenticationToken authentication = context.getAuthentication();

            OidcUserInfoService oidcUserInfoService = oidcUserInfoServiceFactory.getOidcUserInfoService(
            idToken.getAudience().get(0) + "_OidcUserInfoService");

            String principal = authentication.getName();

            List<String> authorities = (List<String>) accessToken.getClaims().get("authorities");
            String role = authorities.stream()
                    .filter(authority -> authority.contains("ROLE"))
                    .findFirst()
                    .orElse("");

            Set<String> requestedScopes = context.getAccessToken().getScopes();

            //System.out.println(oidcUserInfoService);
            //System.out.println(principal);
            //System.out.println(requestedScopes);
            //System.out.println(role);

            Map<String, Object> claims = oidcUserInfoService.getUserInfoClaims(
                    principal,
                    role,
                    requestedScopes);

            //System.out.println(claims);

            // return new OidcUserInfo(principal.getToken().getClaims()); // maps claims from Access Token
            return new OidcUserInfo(claims);
        };
        authorizationServerConfigurer
                .oidc((oidc) -> oidc
                        .userInfoEndpoint((userInfo) -> {
                            userInfo.userInfoMapper(userInfoMapper);
                            }
                        )
                );

        http
                .securityMatcher(endpointsMatcher)
                .authorizeHttpRequests((authorize) -> authorize
                        .anyRequest().authenticated()
                )
                .csrf(csrf -> csrf.ignoringRequestMatchers(endpointsMatcher))
                .oauth2ResourceServer(resourceServer -> resourceServer
                        .jwt(Customizer.withDefaults())
                )
                // Redirect to the login page when not authenticated from the
                // authorization endpoint
                .exceptionHandling((exceptions) -> exceptions
                        .defaultAuthenticationEntryPointFor(
                                new LoginUrlAuthenticationEntryPoint("/signin"),
                                new MediaTypeRequestMatcher(MediaType.TEXT_HTML)
                        )
                )
                .with(authorizationServerConfigurer, Customizer.withDefaults())
                .cors(Customizer.withDefaults());   // Enable CORS

        return http.build();
    }

    @Bean
    @Order(2)
    public SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http)
            throws Exception {
        http
                .authorizeHttpRequests((authorize) -> authorize
                        .requestMatchers("/**").permitAll()
                        .anyRequest().authenticated()
                )
                // Form login handles the redirect to the login page from the
                // authorization server filter chain
                //.formLogin(Customizer.withDefaults());
                .formLogin((formLogin) ->
                        formLogin
                                .usernameParameter("username")
                                .passwordParameter("password")
                                .loginPage("/signin")
                                .failureUrl("/signin?error")
                                .loginProcessingUrl("/authn")
                )
                .cors(Customizer.withDefaults());

        return http.build();
    }

    @Bean
    public UserAccountDaoExtended userDetailsService(DataSource dataSource) {
        UserAccountDaoExtended userDetailsService = new UserAccountDaoExtended(dataSource);

        List<AuthenticationProvider> authenticationProviders = new ArrayList<>();
        authenticationProviders.add(new DaoAuthenticationProvider());

        userDetailsService.setAuthenticationManager(new ProviderManager(authenticationProviders));

        return userDetailsService;
    }

    @Bean
    public JWKSource<SecurityContext> jwkSource() {
        KeyPair keyPair = generateRsaKey();
        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();
        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();
        RSAKey rsaKey = new RSAKey.Builder(publicKey)
                .privateKey(privateKey)
                .keyID(UUID.randomUUID().toString())
                .build();
        JWKSet jwkSet = new JWKSet(rsaKey);
        return new ImmutableJWKSet<>(jwkSet);
    }

    private static KeyPair generateRsaKey() {
        KeyPair keyPair;
        try {
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
            keyPairGenerator.initialize(2048);
            keyPair = keyPairGenerator.generateKeyPair();
        }
        catch (Exception ex) {
            throw new IllegalStateException(ex);
        }
        return keyPair;
    }

    @Bean
    public JwtDecoder jwtDecoder(JWKSource<SecurityContext> jwkSource) {
        return OAuth2AuthorizationServerConfiguration.jwtDecoder(jwkSource);
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public OAuth2TokenCustomizer<JwtEncodingContext> tokenCustomizer(UserDetailsService userDetailsService,
                                                                     OidcUserInfoServiceFactory oidcUserInfoServiceFactory)
    {
        return (context) -> {
            UserDetails userDetails = userDetailsService.loadUserByUsername(context.getPrincipal().getName());
            Collection<? extends GrantedAuthority> authorities = userDetails.getAuthorities();

            List<String> authorityList = authorities.stream()
                    .map(GrantedAuthority::getAuthority)
                    .collect(Collectors.toList());

            if (OAuth2TokenType.ACCESS_TOKEN.equals(context.getTokenType())) {


                context.getClaims().claims(claims ->
                        claims.put("authorities", authorityList));
            }

            if (OidcParameterNames.ID_TOKEN.equals(context.getTokenType().getValue())) {

                OidcUserInfoService oidcUserInfoService = oidcUserInfoServiceFactory
                        .getOidcUserInfoService(context.getRegisteredClient().getClientId()
                                + "_OidcUserInfoService");

                Map<String, Object> idTokenClaims = oidcUserInfoService.getIdTokenClaims(
                        context.getPrincipal().getName(),
                        // "ROLE_" may not always be passed as the first argument
                        authorityList.stream()
                                .filter(authority -> authority.contains("ROLE"))
                                .findFirst()
                                .orElse(""));

                context.getClaims().claims(claims -> claims.putAll(idTokenClaims));
            }
        };
    }

    @Bean
    public AuthorizationServerSettings authorizationServerSettings() {
        return AuthorizationServerSettings.builder()
                .authorizationEndpoint("/oauth2/authorize")
                .deviceAuthorizationEndpoint("/oauth2/device_authorization")
                .deviceVerificationEndpoint("/oauth2/device_verification")
                .tokenEndpoint("/oauth2/token")
                .jwkSetEndpoint("/oauth2/jwks")
                .tokenRevocationEndpoint("/oauth2/revoke")
                .tokenIntrospectionEndpoint("/oauth2/introspect")
                .oidcClientRegistrationEndpoint("/connect/register")
                .oidcUserInfoEndpoint("/userinfo")
                .oidcLogoutEndpoint("/connect/logout")
                .build();
    }

}
